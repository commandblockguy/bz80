If inst_x=0:Then
  If inst_z=0:Then
    // y = 0: NOP
    // y = 1: EX AF, AF'
    If inst_y > 1:Then
      wrap24(reg_pc + 1)→reg_pc
      signed8(get_byte(reg_pc))→inst_immediate
      If inst_y = 2:Then // DJNZ d
        set_mid_byte(wrap8(reg_b - 1), reg_ubc)→reg_ubc
        If reg_b
          wrap24(reg_pc + inst_immediate)→reg_pc
      Else
        If inst_y = 3:Then // JR d
          wrap24(reg_pc + inst_immediate)→reg_pc
        Else // y = 4..7: JR cc[y-4], d
          If cond((inst_y - 4))
            wrap24(reg_pc + inst_immediate)→reg_pc
        End
      End
    End
  End
  If inst_z=1:Then
    If inst_q=0:Then // LD rp, Mmn
      set_rp(inst_p, get24(reg_pc + 1))
      wrap24(reg_pc + 3)→reg_pc
    Else // q=1: ADD HL, rp
      get_hl(inst_prefix):table_rp(inst_p+1)+Ans → temp_var
      Ans > 2^23 → flag_c
      0 → flag_n
      // todo: h flag
      set_hl(wrap24(temp_var))
    End
  End
  If inst_z=2:Then
    If inst_p > 1:Then
      get24(reg_pc + 1)→inst_immediate
      wrap24(reg_pc + 3)→reg_pc
    End
    If inst_q:Then
      If inst_p=0
        get_byte(reg_ubc)→reg_a
      If inst_p=1
        get_byte(reg_ude)→reg_a
      If inst_p=2:Then
        Pause {inst_immediate, get_byte(inst_immediate)}
        set_hl(get_byte(inst_immediate))
      End
      If inst_p=3
        get_byte(inst_immediate)→reg_a
    Else
      If inst_p=0
        set_byte(reg_ubc, reg_a)
      If inst_p=1
        set_byte(reg_ude, reg_a)
      If inst_p=2: Then
        set_bytes(inst_immediate, 3, get_hl(inst_prefix))
      End
      If inst_p=3
        set_byte(inst_immediate, reg_a)
    End
  End
  If inst_z=3:Then
    get_rp(inst_prefix, inst_p)
    If inst_q:Then // DEC rp
      set_rp(inst_p, Ans - 1)
    Else  // INC rp
      set_rp(inst_p, Ans + 1)
    End
  End
  If inst_z=4:Then // INC r
    get_r(inst_prefix, inst_y)
    wrap8(Ans + 1)→temp_var
    set_r(inst_y, temp_var)

    // todo: h flag
    temp_var>127→flag_s
    not(temp_var)→flag_z
    temp_var=128→flag_pv
    0→flag_n
  End
  If inst_z=5:Then // DEC r
    get_r(inst_prefix, inst_y)
    wrap8(Ans - 1)→temp_var
    set_r(inst_y, temp_var)

    // todo: h flag
    temp_var>127→flag_s
    not(temp_var)→flag_z
    temp_var=127→flag_pv
    1→flag_n
  End
  If inst_z=6:Then // LD r, n
    wrap24(reg_pc + 1)→reg_pc
    signed8(get_byte(reg_pc))→inst_immediate
    set_r(inst_y, inst_immediate)
  End
  If inst_z=7:Then
    // TODO: misc accumulator and flags
  End
End
If inst_x=1:Then
  If inst_z=6 and inst_y=6:Then // HALT
    Output(1, 20, "HALTed.")
    While not(getKey):End
    Return
  Else // LD r, r
    get_r(inst_prefix, inst_z)
    set_r(inst_y, Ans)
  End
End
If inst_x=2:Then
  // todo: ALU instructions
End
If inst_x=3:Then
  If inst_z=0:Then // RET cc
    If cond(inst_y):Then
      pop24()
      wrap24(Ans - 1)→reg_pc
    End
  End
  If inst_z=1:Then
    If inst_q:Then
      If inst_p=0:Then // RET
        pop24()
        wrap24(Ans - 1)→reg_pc
      End
      // p = 1: EXX
      If inst_p=2:Then // JP HL
        get_hl(inst_prefix) - 1 → reg_pc
      End
      If inst_p=3:Then // LD SP, HL
        get_hl(inst_prefix)→reg_spl
      End
    Else // q=0: POP rp
      pop24()→temp_var
      If inst_p=3:Then
        mid_byte(Ans)→reg_a
        seq(int(2fPart(.5 temp_var / 2^I)), I, 0, 7)→flags
      Else
        set_rp(inst_p, Ans)
      End
    End
  End
  If inst_z=2:Then // JP cc, Mmn
    get24(reg_pc + 1)→inst_immediate
    wrap24(reg_pc + 3)→reg_pc
    If cond(inst_y)
      wrap24(inst_immediate - 1)→reg_pc
  End
  If inst_z=3:Then
    If inst_y=0:Then // JP Mmn
      get24(reg_pc + 1)→inst_immediate
      wrap24(inst_immediate - 1)→reg_pc
    End
    If inst_y=1:Then // prefix CB
      If inst_prefix=no_prefix:Then
        prefix_bits→prefix_bkp
      Else
        If inst_prefix=prefix_ix:Then
          prefix_ixbits→prefix_bkp
        Else // prefix_iy
          prefix_iybits→prefix_bkp
        End
      End
    End
    // y=2: OUT (n),A
    // y=3: IN A,(n)
    // Not implemented due to the lack of hardware
    If inst_y=2 or inst_y=3:Then
      wrap24(reg_pc+1)→reg_pc
    End
    If inst_y=4:Then // EX (SP), HL
      get_hl(inst_prefix)→temp_var
      get24(reg_spl)→temp_var2
      set_hl(temp_var2)
      set_bytes(reg_spl, 3, temp_var)
    End
    If inst_y=5:Then // EX DE,HL
      reg_ude→temp_var
      get_hl(inst_prefix)→reg_ude
      set_hl(temp_var)
    End
    // y=6: DI
    // y=7: EI
  End
  If inst_z=4:Then // CALL cc, Mmn
    get24(reg_pc + 1)→inst_immediate
    wrap24(reg_pc + 3)→reg_pc
    If cond(inst_y):Then
      push24(reg_pc)
      wrap24(inst_immediate - 1)→reg_pc
    End
  End
  If inst_z=5:Then
    If inst_q:Then
      If inst_p=0:Then // CALL Mmn
        get24(reg_pc + 1)→inst_immediate
        push24(reg_pc)
        wrap24(inst_immediate - 1)→reg_pc
      End
      If inst_p=1:Then // DD prefix
        prefix_ix→prefix_bkp
      End
      If inst_p=2:Then // ED prefix
        prefix_misc→prefix_bkp
      End
      If inst_p=3:Then // FD prefix
        prefix_iy→prefix_bkp
      End
    Else // q=0: PUSH rr
      If inst_p=3:Then
        push24(256 reg_a + Σ(flags(X+1)^X,X,0,7))
      Else
        push24(get_rp(inst_prefix, inst_p))
      End
    End
  End
  If inst_z=6:Then
    // TODO: ALU instructions
  End
  If inst_z=7:Then
    push24(reg_pc)
    wrap24(8 inst_y - 1)→reg_pc
  End
End
