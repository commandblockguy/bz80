If inst_x=0:Then
  If inst_z=0:Then
    // y = 0: NOP
    // y = 1: EX AF, AF'
    If inst_y > 1:Then
      wrap24(reg_pc + 1)→reg_pc
      signed8(get_byte(reg_pc))→inst_immediate
      If inst_y = 2:Then // DJNZ d
        set_mid_byte(wrap8(reg_b - 1), reg_ubc)→reg_ubc
        If reg_b
          wrap24(reg_pc + inst_immediate)→reg_pc
      Else
        If inst_y = 3:Then // JR d
          wrap24(reg_pc + inst_immediate)→reg_pc
        Else // y = 4..7: JR cc[y-4], d
          If cond((inst_y - 4))
            wrap24(reg_pc + inst_immediate)→reg_pc
        End
      End
    End
  End
  If inst_z=1:Then
    If inst_q=0:Then // LD rp, Mmn
      set_rp(inst_p, get24(reg_pc + 1))
      wrap24(reg_pc + 3)→reg_pc
    Else // q=1: ADD HL, rp
      get_hl(inst_prefix):table_rp(inst_p+1)+Ans → temp_var
      Ans > 2^23 → flag_c
      0 → flag_n
      // todo: h flag
      set_hl(wrap24(temp_var))
    End
  End
  If inst_z=2:Then
    If inst_p > 1:Then
      get24(reg_pc + 1)→inst_immediate
      wrap24(reg_pc + 3)→reg_pc
    End
    If inst_q:Then
      If inst_p=0
        get_byte(reg_ubc)→reg_a
      If inst_p=1
        get_byte(reg_ude)→reg_a
      If inst_p=2:Then
        Pause {inst_immediate, get_byte(inst_immediate)}
        set_hl(get_byte(inst_immediate))
      End
      If inst_p=3
        get_byte(inst_immediate)→reg_a
    Else
      If inst_p=0
        set_byte(reg_ubc, reg_a)
      If inst_p=1
        set_byte(reg_ude, reg_a)
      If inst_p=2: Then
        set_bytes(inst_immediate, 3, get_hl(inst_prefix))
      End
      If inst_p=3
        set_byte(inst_immediate, reg_a)
    End
  End
  If inst_z=3:Then
    get_rp(inst_prefix, inst_p)
    If inst_q:Then
      set_rp(inst_p, Ans - 1)
    Else
      set_rp(inst_p, Ans + 1)
    End
  End
  If inst_z=4:Then
  
  End
  If inst_z=5:Then
  
  End
  If inst_z=6:Then
  
  End
  If inst_z=7:Then
  
  End
End
If inst_x=1:Then

End
If inst_x=2:Then

End
If inst_x=3:Then

End
