#include "registers.h"
#include "util.h"
#include "routine.h"
#include "labels.h"
#include "mem.h"
#include "instruction.h"
#include "keys.h"

#define dbg 1
#define dbg_step 0
#define dbg_full_redraw 1

// Handle subroutine calls
// arg_list(1) is the numeric id of the subroutine to run
// The remaining elements of the list are the arguments for that routine
SetUpEditor call_list
If dim(call_list):Then
  call_list→arg_list
  DelVar call_list
#include "routines/error.pbasic"
#include "routines/set_hl.pbasic"
#include "routines/set_r.pbasic"
#include "routines/set_rp.pbasic"
#include "routines/alu_inst.pbasic"
  Return
End

"Auto-generated."
"Original code:"
"https://git.io/Jfodk"

// todo: remove
DelVar reg_ubc
DelVar reg_ude
DelVar reg_uhl
DelVar reg_a

DelVar reg_ix
DelVar reg_iy
DelVar reg_mbase
DelVar reg_pc
DelVar reg_sps
DelVar reg_spl
DelVar adl
DelVar ief
DelVar madl



// Set up register tables
TOSTR({reg_uhl,reg_uhl,reg_uhl,reg_ix,reg_iy,reg_ix,reg_iy})→table_curr_hl
TOSTR(remainder(int({reg_ubc/256,reg_ubc,reg_ude/256,reg_ude,Ans/256,Ans,get_byte(Ans),reg_a}),256))→table_r
TOSTR({reg_ubc,reg_ude,Ans,reg_spl})→table_rp
TOSTR({flag_z,flag_c,flag_pv,flag_s})→table_cc

999→dim(mem)
DelVar flags
8→dim(flags)

no_prefix→prefix_bkp

#if dev && !dbg_full_redraw
ClrHome
Output(1,1, "A:")
Output(2,1, "F:")
Output(3,1, "BC:")
Output(4,1, "DE:")
Output(5,1, "HL:")
Output(6,1, "IX:")
Output(7,1, "IY:")
Output(8,1, "SP:")
Output(9,1, "PC:")
#endif

While Ans ≠ key_clear
#include "process_instruction.pbasic"

#if dbg
#if dbg_full_redraw
  ClrHome
  Output(1,1, "A:")
  Output(2,1, "F:")
  Output(3,1, "BC:")
  Output(4,1, "DE:")
  Output(5,1, "HL:")
  Output(6,1, "IX:")
  Output(7,1, "IY:")
  Output(8,1, "SP:")
  Output(9,1, "PC:")
#endif
  Output(1,4, reg_a)
  Output(2,4, flags)
  Output(3,4, reg_ubc)
  Output(4,4, reg_ude)
  Output(5,4, reg_uhl)
  Output(6,4, reg_ix)
  Output(7,4, reg_iy)
  Output(8,4, reg_spl)
  Output(8,12,get24(reg_spl))
  Output(9,4, reg_pc)
#endif
  getKey
#if dbg && dbg_step
  Repeat Ans
    getKey
  End
#endif
End

Lbl lbl_exit
